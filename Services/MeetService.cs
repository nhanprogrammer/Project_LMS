using Microsoft.EntityFrameworkCore;
using Project_LMS.Data;
using Project_LMS.DTOs.Request;
using Project_LMS.DTOs.Response;
using Project_LMS.Interfaces;
using Project_LMS.Models;
using Twilio;
using Twilio.Jwt.AccessToken;
using Twilio.Rest.Conversations.V1.Conversation;
using Twilio.Rest.Video.V1;

namespace Project_LMS.Services
{
    public class MeetService : IMeetService
    {
        private readonly ApplicationDbContext _context;
        private readonly IAuthService _authService;
        private readonly string _twilioAccountSid;
        private readonly string _twilioAuthToken;
        private readonly string _twilioApiKey;
        private readonly string _twilioApiSecret;

        public MeetService(ApplicationDbContext context, IConfiguration configuration, IAuthService authService)
        {
            _context = context;
            _authService = authService;
            _twilioAccountSid = configuration["Twilio:AccountSid"] ?? throw new ArgumentNullException("Twilio:AccountSid");
            _twilioAuthToken = configuration["Twilio:AuthToken"] ?? throw new ArgumentNullException("Twilio:AuthToken");
            _twilioApiKey = configuration["Twilio:ApiKey"] ?? throw new ArgumentNullException("Twilio:ApiKey");
            _twilioApiSecret = configuration["Twilio:ApiSecret"] ?? throw new ArgumentNullException("Twilio:ApiSt");
            TwilioClient.Init(_twilioAccountSid, _twilioAuthToken);
        }

        public async Task<MeetResponse?> GetJitsiClassRoom(CreateRoomRequest request)
        {
            var user = await _authService.GetUserAsync();
            if (user == null)
                throw new UnauthorizedAccessException("Kh√¥ng th·ªÉ x√°c th·ª±c user.");

            // üîπ T√¨m lesson theo LessonId
            var lesson = await _context.Lessons
                .Include(l => l.User)
                .FirstOrDefaultAsync(l => l.Id == request.LessonId);

            if (lesson == null)
                throw new KeyNotFoundException($"Kh√¥ng t√¨m th·∫•y lesson v·ªõi Id: {request.LessonId}");

            if (string.IsNullOrEmpty(lesson.ClassLessonCode))
                throw new InvalidOperationException($"Lesson {request.LessonId} kh√¥ng c√≥ m√£ LessonCode.");

            // üîπ Ki·ªÉm tra quy·ªÅn c·ªßa user (Teacher hay Student)
            if (user.Role == null)
                throw new InvalidOperationException("User kh√¥ng c√≥ Role x√°c ƒë·ªãnh.");

            bool isTeacher = user.Role.Name.Equals("TEACHER", StringComparison.OrdinalIgnoreCase);

            // üîπ Ki·ªÉm tra ClassOnline c√≥ t·ªìn t·∫°i cho lesson n√†y ch∆∞a
            var classOnline = await _context.ClassOnlines
                .FirstOrDefaultAsync(c => c.LessonCode == lesson.ClassLessonCode);

            if (isTeacher)
            {
                if (classOnline == null)
                {
                    // üîπ N·∫øu ch∆∞a c√≥, gi√°o vi√™n t·∫°o m·ªõi ClassOnline v·ªõi m√£ ph√≤ng UUID
                    classOnline = new ClassOnline
                    {
                        LessonCode = lesson.ClassLessonCode,
                        ClassOnlineCode = Guid.NewGuid().ToString(), // T·∫°o m√£ duy nh·∫•t
                        UserId = user.Id,
                        UserCreate = user.Id
                    };

                    _context.ClassOnlines.Add(classOnline);
                    await _context.SaveChangesAsync();
                }

                return new MeetResponse
                {
                    ClassTitle = $"{lesson.Topic} - GV: {lesson.User?.FullName ?? "Kh√¥ng x√°c ƒë·ªãnh"}",
                    Link = $"https://meet.jit.si/{classOnline.ClassOnlineCode}"
                };
            }
            else
            {
                if (classOnline == null)
                    throw new InvalidOperationException("L·ªõp h·ªçc ch∆∞a ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu. Vui l√≤ng ch·ªù gi√°o vi√™n.");

                return new MeetResponse
                {
                    ClassTitle = $"{lesson.Topic} - GV: {lesson.User?.FullName ?? "Kh√¥ng x√°c ƒë·ªãnh"}",
                    Link = $"https://meet.jit.si/{classOnline.ClassOnlineCode}"
                };
            }
        }

        
        public async Task<ClassOnlineResponse?> GetOrCreateTeacherOnlineClass(CreateRoomRequest request)
        {
            var user = await _authService.GetUserAsync();
            if (user == null)
                throw new Exception("Kh√¥ng th·ªÉ x√°c th·ª±c user.");

            // üîπ Ki·ªÉm tra xem l·ªõp h·ªçc ƒë√£ t·ªìn t·∫°i ch∆∞a
            var classOnline = await _context.ClassOnlines
                .Include(c => c.Lesson)
                .FirstOrDefaultAsync(c => c.LessonId == request.LessonId);

            // üîπ N·∫øu l·ªõp h·ªçc ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t ClassOnlineCode t·ª´ Twilio
            if (classOnline != null)
            {
                // üîπ T·∫°o ph√≤ng m·ªõi tr√™n Twilio
                var room = await RoomResource.CreateAsync(
                    uniqueName: Guid.NewGuid().ToString(),
                    type: RoomResource.RoomTypeEnum.Group
                );

                if (room == null || string.IsNullOrEmpty(room.Sid))
                    throw new Exception("Kh√¥ng th·ªÉ t·∫°o ph√≤ng tr√™n Twilio.");

                // üîπ C·∫≠p nh·∫≠t m√£ ph√≤ng m·ªõi t·ª´ Twilio
                classOnline.ClassOnlineCode = room.Sid;
                classOnline.UserUpdate = user.Id;
                _context.ClassOnlines.Update(classOnline);
                await _context.SaveChangesAsync();

                return new ClassOnlineResponse
                {
                    Id = classOnline.Id,
                    ClassTitle = classOnline.ClassTitle,
                    Token = GenerateToken(user.Email, classOnline.ClassOnlineCode),
                    RoomCode = classOnline.ClassOnlineCode
                };
            }

            // üîπ N·∫øu ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi ClassOnline
            var newRoom = await RoomResource.CreateAsync(
                uniqueName: Guid.NewGuid().ToString(),
                type: RoomResource.RoomTypeEnum.Group
            );

            if (newRoom == null || string.IsNullOrEmpty(newRoom.Sid))
                throw new Exception("Kh√¥ng th·ªÉ t·∫°o ph√≤ng tr√™n Twilio.");

            // üîπ T√¨m lesson li√™n quan
            var lesson = await _context.Lessons
                .Include(l => l.User)
                .FirstOrDefaultAsync(l => l.Id == request.LessonId);

            if (lesson == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y lesson v·ªõi Id: {request.LessonId}");

            if (lesson.User == null)
                throw new Exception($"Lesson kh√¥ng c√≥ th√¥ng tin gi√°o vi√™n: {request.LessonId}");

            // üîπ T·∫°o m·ªõi ClassOnline
            var newClassOnline = new ClassOnline
            {
                ClassOnlineCode = newRoom.Sid,
                UserId = user.Id,
                LessonId = request.LessonId,
                ClassTitle = $"{lesson.Topic} - GV: {lesson.User.FullName}",
                UserCreate = user.Id
            };

            _context.ClassOnlines.Add(newClassOnline);
            await _context.SaveChangesAsync();

            return new ClassOnlineResponse
            {
                Id = newClassOnline.Id,
                ClassTitle = newClassOnline.ClassTitle,
                Token = GenerateToken(user.Email, newClassOnline.ClassOnlineCode),
                RoomCode = newClassOnline.ClassOnlineCode
            };
        }



        public async Task<ClassOnlineResponse?> JoinOnlineClass(CreateRoomRequest request)
        {
            var user = await _authService.GetUserAsync();
            if (user == null)
                throw new Exception("Kh√¥ng th·ªÉ x√°c th·ª±c user.");

            // üîπ Ki·ªÉm tra l·ªõp h·ªçc ƒë√£ t·ªìn t·∫°i ch∆∞a
            var classOnline = await _context.ClassOnlines
                .Include(c => c.Lesson)
                .FirstOrDefaultAsync(c => c.LessonId == request.LessonId);

            if (classOnline == null)
                throw new Exception("L·ªõp h·ªçc ch∆∞a ƒë∆∞·ª£c t·∫°o. Vui l√≤ng li√™n h·ªá gi√°o vi√™n.");

            return new ClassOnlineResponse
            {
                Id = classOnline.Id,
                // ClassCode = classOnline.ClassOnlineCode,
                ClassTitle = classOnline.ClassTitle,
                Token = GenerateToken(user.Email, classOnline.ClassOnlineCode),
                RoomCode = classOnline.ClassOnlineCode
            };
        }


        //  ƒê√≥ng ph√≤ng h·ªçc
        public async Task<bool> CloseRoom(MeetCloseRequest request)
        {
            var user = await _authService.GetUserAsync();
            if (user == null)
                throw new Exception("Kh√¥ng th·ªÉ x√°c th·ª±c user.");

            var classOnline = await _context.ClassOnlines
                .Where(c => c.ClassOnlineCode == request.RoomId)
                .Select(c => new { c.UserId, c.ClassOnlineCode })
                .FirstOrDefaultAsync();

            if (classOnline == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc v·ªõi m√£: {classOnline.ClassOnlineCode}");

            if (classOnline.UserId != user.Id)
                throw new Exception("Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn ƒë√≥ng ph√≤ng.");

            try
            {
                var room = await RoomResource.UpdateAsync(
                    classOnline.ClassOnlineCode,
                    status: RoomResource.RoomStatusEnum.Completed
                );

                if (room == null || room.Status != RoomResource.RoomStatusEnum.Completed)
                    throw new Exception("Kh√¥ng th·ªÉ ƒë√≥ng ph√≤ng, vui l√≤ng th·ª≠ l·∫°i.");

                return true;
            }
            catch (Exception ex)
            {
                throw new Exception($"L·ªói khi ƒë√≥ng ph√≤ng tr√™n Twilio: {ex.Message}");
            }
        }

        // Kick user kh·ªèi ph√≤ng (V√¥ hi·ªáu h√≥a token)
        public async Task<bool> KickUserFromRoom(string RoomId, int userId)
        {
            var user = await _authService.GetUserAsync();
            if (user == null)
                throw new Exception("Kh√¥ng th·ªÉ x√°c th·ª±c user.");

            // üîπ Ki·ªÉm tra l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y ClassOnlineCode
            var classOnline = await _context.ClassOnlines
                .FirstOrDefaultAsync(c => c.ClassOnlineCode == RoomId);

            if (classOnline == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc v·ªõi m√£: {RoomId}");

            if (classOnline.UserId != user.Id)
                throw new Exception("Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn kick user kh·ªèi ph√≤ng.");

            // üîπ L·∫•y email c·ªßa user c·∫ßn kick
            var userIdentity = await _context.Users
                .Where(u => u.Id == userId && u.IsDelete != true)
                .Select(u => u.Email)
                .FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(userIdentity))
                throw new Exception("Kh√¥ng t√¨m th·∫•y th√¥ng tin user c·∫ßn kick.");

            try
            {
                // üîπ L·∫•y danh s√°ch participants ƒë·ªÉ t√¨m participant SID theo identity
                var participants = await ParticipantResource.ReadAsync(classOnline.ClassOnlineCode);
                var participant = participants.FirstOrDefault(p => p.Identity == userIdentity);

                if (participant == null)
                    throw new Exception($"Kh√¥ng t√¨m th·∫•y user {userIdentity} trong ph√≤ng {classOnline.ClassOnlineCode}.");

                // üîπ X√≥a participant kh·ªèi ph√≤ng
                await ParticipantResource.DeleteAsync(classOnline.ClassOnlineCode, participant.Sid);
                return true;
            }
            catch (Exception ex)
            {
                throw new Exception($"L·ªói khi kick user {userIdentity}: {ex.Message}");
            }
        }

        public string GenerateToken(string email, string roomSid)
        {
            var grant = new VideoGrant { Room = roomSid };
            var token = new Token(_twilioAccountSid, _twilioApiKey, _twilioApiSecret, email, grants: new HashSet<IGrant> { grant });

            return token.ToJwt();
        }

        public async Task<bool> AddQuestionAnswer(QuestionAnswerRequest request)
        {
            var user = await _authService.GetUserAsync();
            if (user == null)
                throw new Exception("Kh√¥ng th·ªÉ x√°c th·ª±c user.");

            var classOnline = await _context.ClassOnlines
                .FirstOrDefaultAsync(c => c.ClassOnlineCode == request.RoomId);

            if (classOnline == null)
                throw new Exception($"Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc v·ªõi m√£: {request.RoomId}");
            var lesson = await _context.Lessons
                .FirstOrDefaultAsync(c => c.Id == classOnline.LessonId);

            var questionAnswer = new QuestionAnswer
            {
                UserId = user.Id,
                TeachingAssignmentId = lesson.TeachingAssignmentId,
                Message = request.Content,
                UserCreate = user.Id,
                UserUpdate = user.Id
            };

            _context.QuestionAnswers.Add(questionAnswer);
            await _context.SaveChangesAsync();

            return true;
        }

    }
}
